version: 2.1

orbs:
  # Replace this with your own!
  circleci-terraform-orb: indorenilesh/terraform@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.1.0
  bats: circleci/bats@1.0
  shellcheck: circleci/shellcheck@2.0
  aws-cli: circleci/aws-cli@2.0

# Pipeline Parameters
## These parameters are used internally by orb-tools. Skip to the Jobs section.
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"
  docker-version:
    description: The version of Docker to use when building the image
    type: string
    default: "20.10.11"

jobs:
  # Define one or more jobs which will utilize your orb's commands and parameters to validate your changes.
  integration-test-1:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      # "greet" is a sample command packaged with this orb config.
      # This sample integration test will run as long as the greet command exists. Once you remove the greet command you should remove this line.
      # Push new changes first, before adding new tests to your config.
      - circleci-terraform-orb/runtf:
          env: dev
          cmd: validate
  docker-build-and-push:
    resource_class: large
    docker:
      - image: cimg/base:stable
    environment:
      AWS_DEFAULT_REGION: eu-west-2
    parameters:
      ecr_region:
        type: string
      ecr_account_url:
        type: string
      ecr_repository:
        type: string
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: <<pipeline.parameters.docker-version>>
      - aws-cli/setup
      - run:
          name: ECR Login
          command: |
            docker login -u AWS -p $(aws ecr get-login-password --region <<parameters.ecr_region>>) <<parameters.ecr_account_url>>
      - run:
          name: Generate Docker tag
          command: |
            echo 'export DOCKER_TAG="$([ "${CIRCLE_BRANCH}" == "main" ] && echo "latest" || git log -1 --pretty=%h )"' >> $BASH_ENV
      - run:
          name: Docker build
          command: |
            docker build -t "<<parameters.ecr_account_url>>/<<parameters.ecr_repository>>:${DOCKER_TAG}" .
      - run:
          name: Docker push
          command: |
            docker push "<<parameters.ecr_account_url>>/<<parameters.ecr_repository>>:${DOCKER_TAG}"

workflows:
  # Prior to producing a development orb (which requires credentials) basic validation, linting, and even unit testing can be performed.
  # This workflow will run on every commit
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - docker-build-and-push:
          name: "docker-build-and-push/prod"
          context: aws-infrastructure
          ecr_region: us-east-1
          ecr_account_url: 550842621181.dkr.ecr.us-east-1.amazonaws.com
          ecr_repository: pipeline-image
          filters:
            branches:
              only:
                - main
      - orb-tools/lint # Lint Yaml files
      - orb-tools/pack # Pack orb source
      # optional: Run BATS tests against your scripts
      #- bats/run:
      #    path: ./src/tests
      # Publish development version(s) of the orb.
      - orb-tools/publish-dev:
          orb-name: indorenilesh/terraform
          context: orb-publishing # A restricted context containing your private publishing credentials. Will only execute if approved by an authorized user.
          requires:
            - orb-tools/lint
            - orb-tools/pack
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  # This `integration-test_deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: indorenilesh/terraform
          context: orb-publishing
          add-pr-comment: false
          fail-if-semver-not-indicated: true
          publish-version-tag: false
          # requires:
          #   - integration-test-1
          filters:
            branches:
              only:
                - master
                - main
      # - integration-test-1